name: Linux CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.build_type }} ${{ matrix.build_unstable }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      GTSAM_BUILD_UNSTABLE: ${{ matrix.build_unstable }}
    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [ubuntu-18.04-gcc-9, ubuntu-18.04-clang-10]

        build_type: [Debug, Release]
        build_unstable: [ON, OFF]
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-10
            os: ubuntu-18.04
            compiler: clang
            version: "10"

    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # LLVM 10 is not in Bionic's repositories so we add the official LLVM repository.
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "10" ]; then
            # Add server key so that the package can be trusted.
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 15CF4D18AF4F7421
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${{ matrix.version }} main"
          fi
          sudo apt-get -y update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi

          sudo apt-get install -y cmake build-essential pkg-config libpython-dev python-numpy wget

          # Install Boost 1.66
          wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.gz
          tar -xzf boost_1_66_0.tar.gz
          cd boost_1_66_0
          ./bootstrap.sh
          sudo ./b2 install

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          bash .github/scripts/nix.sh -t
